#+TITLE: Flink K8S Operator Setup
#+EXPORT_FILE_NAME: ./k8s.html
#+SETUPFILE: https://devlibx.github.io/emacs/org/theams/theme-readtheorg/theme-readtheorg.setup
#+OPTIONS: num:nil

* K8S Operator Installation

Setup cert manager
#+begin_src shell
kubectl create -f https://github.com/jetstack/cert-manager/releases/download/v1.8.2/cert-manager.yaml
#+end_src


Install K8S operator to manage Flink 
#+begin_src shell
helm repo add flink-operator-repo https://downloads.apache.org/flink/flink-kubernetes-operator-1.7.0/
helm install --set image.repository=apache/flink-kubernetes-operator flink-kubernetes-operator flink-operator-repo/flink-kubernetes-operator
#+end_src

* Build your Flink Image
This is not mandatory. I am doing this steps to pack the jar in the docker image to run it. You can get it from S3 (for that you will need to do more configration
to allow flink to have access to S3. Also some flink s3 jars are also needed in the setup)

** Dockerfile
#+begin_src shell
FROM flink:1.18
COPY libexec/examples/streaming/StateMachineExample.jar /opt/flink/plugins/
#+end_src
Note in my case, I had flink installed in my machine. And this StateMachineExample.jar file in in my flink installation. 

** Build image
Build image and push to your docker hub or common docker hub. K8S should be able to pull image form this repo
#+begin_src shell
docker build -t docker.io/<>/flink:1.18.001
#+end_src

* Flink Job
** Flink job configration
NOTE - put proper image link. Note in this image I copied my jar to /opt/flink/plugins. You also need to change as per your path.

File Name = deploy.yaml
#+begin_src yaml
  
apiVersion: flink.apache.org/v1beta1
kind: FlinkDeployment
metadata:
  name: basic-example-6
spec:
  image:  docker.io/<>/flink:1.18.001
  flinkVersion: v1_18
  flinkConfiguration:
    taskmanager.numberOfTaskSlots: "1"
  serviceAccount: flink
  jobManager:
    resource:
      memory: "1024m"
      cpu: 1
  taskManager:
    resource:
      memory: "1024m"
      cpu: 1
  job:
    jarURI: local:///opt/flink/plugins/StateMachineExample.jar
    parallelism: 4
    upgradeMode: stateless
#+end_src


* Deploy
** Deploy your job to K8S cluster
#+begin_src shell
  kubectl create -f deploy.yaml

  # Also to stop the job or delete it
  kubectl delete -f deploy.yaml
#+end_src
** Verify the job is running
Your can go to your cluster and can check the pods with this job name
** Launch flink UI
This setup will also launch flink UI for your job. Form example in minikube your can do following
#+begin_src shell
  kubectl port-forward svc/basic-example-6-rest 8081
#+end_src

Launch http://localhost:8081 to see your Flink UI
